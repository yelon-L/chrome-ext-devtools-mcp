/**
 * @license
 * Copyright 2025 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Service Worker激活工具
 * 使用CDP API激活Chrome扩展的Service Worker
 */

import z from 'zod';

import {ExtensionHelper} from '../../extension/ExtensionHelper.js';
import {ToolCategories} from '../categories.js';
import {defineTool} from '../ToolDefinition.js';

export const activateExtensionServiceWorker = defineTool({
  name: 'activate_extension_service_worker',
  description: `激活一个或多个Chrome扩展的Service Worker

自动导航到chrome://extensions并激活指定扩展的Service Worker。
当扩展的SW处于Inactive状态时，某些功能（如消息监听、后台任务）无法工作。
此工具通过脚本自动点击"service worker"按钮来激活SW。

适用场景：
- 扩展调试前确保SW已激活
- 批量激活多个扩展的SW
- 自动化测试流程中的环境准备`,
  annotations: {
    category: ToolCategories.EXTENSION_DEBUGGING,
    readOnlyHint: false,
  },
  schema: {
    extensionId: z
      .string()
      .regex(/^[a-z]{32}$/)
      .optional()
      .describe('扩展ID。如果不提供，将根据mode参数激活SW'),
    mode: z
      .enum(['single', 'all', 'inactive'])
      .optional()
      .default('inactive')
      .describe(`激活模式：
        - single: 只激活指定extensionId的SW（需提供extensionId）
        - all: 激活所有扩展的SW（包括已激活的）
        - inactive: 只激活未激活的SW（默认）`),
  },
  handler: async (request, response, context) => {
    const {extensionId, mode = 'inactive'} = request.params;

    // 验证参数组合
    if (mode === 'single' && !extensionId) {
      response.appendResponseLine('# 参数错误\n');
      response.appendResponseLine('❌ 使用 `single` 模式时必须提供 `extensionId`');
      return;
    }

    try {
      // 使用CDP API方式激活Service Worker
      const helper = new ExtensionHelper(context.getBrowser());
      const results: Array<{
        id: string;
        name: string;
        success: boolean;
        method?: string;
        error?: string;
        wasActive: boolean;
      }> = [];

      // 获取需要激活的扩展列表
      let targetExtensions: Array<{id: string; name: string; isActive: boolean}> = [];
      
      if (mode === 'single' && extensionId) {
        // 单个扩展模式
        const isActive = await context.isServiceWorkerActive(extensionId);
        const extInfo = await context.getExtensionDetails(extensionId);
        targetExtensions = [{
          id: extensionId,
          name: extInfo?.name || 'Unknown',
          isActive
        }];
      } else {
        // 批量模式：获取所有扩展
        const extensions = await context.getExtensions(false);
        
        for (const ext of extensions) {
          const isActive = await context.isServiceWorkerActive(ext.id);
          
          // 根据mode筛选
          if (mode === 'inactive' && isActive) {
            continue; // 跳过已激活的
          }
          
          targetExtensions.push({
            id: ext.id,
            name: ext.name,
            isActive
          });
        }
      }

      // 处理没有需要激活的情况
      if (targetExtensions.length === 0) {
        response.appendResponseLine('# Service Worker 激活结果\n');
        if (mode === 'single') {
          response.appendResponseLine(`❌ 未找到扩展: \`${extensionId}\`\n`);
          response.appendResponseLine('💡 **提示**: 使用 `list_extensions` 查看所有已安装的扩展');
        } else {
          response.appendResponseLine(`✅ **状态**: 所有扩展的Service Worker都已激活\n`);
          response.appendResponseLine(`**模式**: ${mode === 'all' ? '全部' : '仅未激活'}`);
        }
        response.setIncludePages(true);
        return;
      }

      // 激活目标扩展
      for (const target of targetExtensions) {
        const result = await helper.activateServiceWorker(target.id);
        
        results.push({
          id: target.id,
          name: target.name,
          success: result.success,
          method: result.method,
          error: result.error,
          wasActive: target.isActive
        });
      }

      // 格式化输出
      await formatCDPResponse(response, {
        status: 'completed',
        activated: results.filter(r => r.success).length,
        total: results.length,
        mode,
        results
      }, extensionId, mode);

      response.setIncludePages(true);
    } catch (error) {
      const message = error instanceof Error ? error.message : String(error);
      response.appendResponseLine('# Service Worker 激活失败\n');
      response.appendResponseLine(`❌ **错误**: ${message}\n`);
      response.appendResponseLine('**可能的原因**:');
      response.appendResponseLine('- Chrome连接断开');
      response.appendResponseLine('- 扩展ID不存在');
      response.appendResponseLine('- CDP权限不足');
      response.appendResponseLine('\n**建议**:');
      response.appendResponseLine('- 使用 `list_extensions` 查看可用扩展');
      response.appendResponseLine('- 检查Chrome DevTools连接状态');
    }
  },
});

/**
 * 格式化CDP API响应输出
 */
async function formatCDPResponse(
  response: any,
  result: any,
  extensionId: string | undefined,
  mode: string
) {
  response.appendResponseLine('# Service Worker 激活结果\n');
  
  // 显示激活统计
  response.appendResponseLine(`✅ **成功激活**: ${result.activated} / ${result.total}\n`);
  
  if (mode === 'single' && extensionId) {
    response.appendResponseLine(`**模式**: 单个扩展 (${extensionId})`);
  } else if (mode === 'all') {
    response.appendResponseLine(`**模式**: 全部扩展`);
  } else {
    response.appendResponseLine(`**模式**: 仅未激活的扩展`);
  }

  // 显示详细结果
  if (result.results && result.results.length > 0) {
    response.appendResponseLine('\n## 激活详情\n');
    
    for (const item of result.results) {
      const statusIcon = item.success ? '✅' : '❌';
      const stateLabel = item.wasActive ? '(已激活)' : '(未激活→激活中)';
      
      response.appendResponseLine(`${statusIcon} **${item.name}**`);
      response.appendResponseLine(`   - ID: \`${item.id}\``);
      response.appendResponseLine(`   - 状态: ${stateLabel}`);
      
      if (item.success) {
        if (item.method) {
          response.appendResponseLine(`   - 激活方法: ${item.method}`);
        }
      } else if (item.error) {
        response.appendResponseLine(`   - 错误: ${item.error}`);
      }
      
      response.appendResponseLine('');
    }
  }

  // 添加提示信息
  if (result.activated > 0) {
    response.appendResponseLine('\n**注意事项**:');
    response.appendResponseLine('- Service Worker激活后可能需要短暂延迟才能完全就绪');
    response.appendResponseLine('- 使用 `list_extension_contexts` 可查看当前扩展上下文状态');
    response.appendResponseLine('- 使用 `get_extension_logs` 可查看SW的启动日志');
  }
}

/* 
 * 注释：旧的UI脚本方式已废弃
 * 原因：chrome://extensions 使用多层Shadow DOM，UI操作不可靠
 * 新方案：使用CDP API (ExtensionHelper.activateServiceWorker)
 */
        
        // 1. 检查是否在扩展管理页
        if (!window.location.href.includes('chrome://extensions')) {
          window.location.href = 'chrome://extensions';
          return { 
            status: 'navigating',
            message: '正在跳转到chrome://extensions...',
            retry: true 
          };
        }

        // 2. 查找所有扩展项（需要穿透Shadow DOM）
        let extensionItems = [];
        
        // 方法1: 尝试穿透Shadow DOM（Chrome使用Shadow DOM）
        const manager = document.querySelector('extensions-manager');
        if (manager && manager.shadowRoot) {
          const itemList = manager.shadowRoot.querySelector('extensions-item-list');
          if (itemList && itemList.shadowRoot) {
            extensionItems = itemList.shadowRoot.querySelectorAll('extensions-item');
          }
        }
        
        // 方法2: 直接查询（旧版Chrome或未使用Shadow DOM）
        if (extensionItems.length === 0) {
          extensionItems = document.querySelectorAll('extensions-item');
        }
        
        if (extensionItems.length === 0) {
          return {
            status: 'error',
            message: '未找到任何扩展',
            hint: '请确保Chrome已安装扩展，并且页面已完全加载',
            debug: {
              hasManager: !!document.querySelector('extensions-manager'),
              hasManagerShadowRoot: !!(manager && manager.shadowRoot),
              pageUrl: window.location.href
            }
          };
        }

        // 3. 根据mode参数筛选目标扩展
        const targets = [];
        extensionItems.forEach(item => {
          const id = item.getAttribute('id');
          
          // 查找名称（可能在Shadow DOM中）
          let nameEl = item.querySelector('#name');
          if (!nameEl && item.shadowRoot) {
            nameEl = item.shadowRoot.querySelector('#name');
          }
          const name = nameEl ? nameEl.textContent.trim() : 'Unknown';
          
          // 查找Service Worker按钮（可能在Shadow DOM中）
          let swButton = null;
          
          // 尝试在主DOM中查找
          swButton = item.querySelector('#service-worker-button');
          if (!swButton) {
            swButton = item.querySelector('[id*="service-worker"]');
          }
          
          // 尝试在Shadow DOM中查找
          if (!swButton && item.shadowRoot) {
            swButton = item.shadowRoot.querySelector('#service-worker-button');
            if (!swButton) {
              swButton = item.shadowRoot.querySelector('[id*="service-worker"]');
            }
            if (!swButton) {
              const buttons = item.shadowRoot.querySelectorAll('button');
              for (const btn of buttons) {
                if (btn.textContent.toLowerCase().includes('service worker')) {
                  swButton = btn;
                  break;
                }
              }
            }
          }
          
          // 降级：文本匹配
          if (!swButton) {
            const buttons = item.querySelectorAll('button');
            for (const btn of buttons) {
              if (btn.textContent.toLowerCase().includes('service worker')) {
                swButton = btn;
                break;
              }
            }
          }
          
          if (!swButton) {
            return; // 没有SW按钮，跳过此扩展
          }
          
          const buttonText = swButton.textContent || '';
          const isActive = !buttonText.toLowerCase().includes('inactive');
          
          // 根据mode和extensionId筛选
          if (mode === 'single') {
            if (id !== extensionId) return;
          } else if (mode === 'inactive') {
            if (isActive) return;
          }
          // mode === 'all' 时不过滤
          
          targets.push({ 
            id, 
            name, 
            button: swButton, 
            isActive,
            buttonText: buttonText.trim()
          });
        });

        // 处理未找到指定扩展的情况
        if (mode === 'single' && targets.length === 0) {
          return {
            status: 'error',
            message: \`未找到指定的扩展\`,
            extensionId: extensionId,
            hint: '请检查extensionId是否正确，或使用list_extensions工具查看可用扩展'
          };
        }

        // 处理没有需要激活的SW的情况
        if (targets.length === 0) {
          return {
            status: 'completed',
            activated: 0,
            total: 0,
            message: mode === 'inactive' 
              ? '所有扩展的Service Worker都已激活' 
              : '没有找到需要激活的Service Worker'
          };
        }

        // 4. 激活目标SW
        const results = [];
        for (const target of targets) {
          try {
            target.button.click();
            results.push({
              id: target.id,
              name: target.name,
              success: true,
              wasActive: target.isActive,
              buttonText: target.buttonText
            });
          } catch (error) {
            results.push({
              id: target.id,
              name: target.name,
              success: false,
              error: error.message,
              wasActive: target.isActive
            });
          }
        }

        // 5. 返回结果
        return {
          status: 'completed',
          activated: results.filter(r => r.success).length,
          total: targets.length,
          mode: mode,
          results: results
        };
      })();
    `;

    try {
      // 执行激活脚本
      const result = await page.evaluate(activationScript) as any;

      // 处理需要重试的情况（页面导航）
      if (result?.retry) {
        response.appendResponseLine('# Service Worker 激活\n');
        response.appendResponseLine(`📍 ${result.message}`);
        response.appendResponseLine('\n等待页面加载...\n');
        
        // 等待导航完成
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // 重试执行
        const retryResult = await page.evaluate(activationScript) as any;
        await formatResponse(response, retryResult, extensionId, mode);
      } else {
        await formatResponse(response, result, extensionId, mode);
      }

      response.setIncludePages(true);
    } catch (error) {
      const message = error instanceof Error ? error.message : String(error);
      response.appendResponseLine('# Service Worker 激活失败\n');
      response.appendResponseLine(`❌ **错误**: ${message}\n`);
      response.appendResponseLine('**可能的原因**:');
      response.appendResponseLine('- Chrome版本不兼容（DOM结构变化）');
      response.appendResponseLine('- 页面加载未完成');
      response.appendResponseLine('- 扩展管理页面结构已变更');
      response.appendResponseLine('\n**建议**:');
      response.appendResponseLine('- 手动访问 chrome://extensions 检查页面');
      response.appendResponseLine('- 尝试刷新页面后重试');
    }
  },
});

/**
 * 格式化响应输出
 */
async function formatResponse(
  response: any,
  result: any,
  extensionId: string | undefined,
  mode: string
) {
  if (result.status === 'error') {
    response.appendResponseLine('# Service Worker 激活失败\n');
    response.appendResponseLine(`❌ **错误**: ${result.message}\n`);
    if (result.extensionId) {
      response.appendResponseLine(`**Extension ID**: ${result.extensionId}`);
    }
    if (result.hint) {
      response.appendResponseLine(`\n💡 **提示**: ${result.hint}`);
    }
    return;
  }

  response.appendResponseLine('# Service Worker 激活结果\n');
  
  // 显示激活统计
  response.appendResponseLine(`✅ **成功激活**: ${result.activated} / ${result.total}\n`);
  
  if (mode === 'single' && extensionId) {
    response.appendResponseLine(`**模式**: 单个扩展 (${extensionId})`);
  } else if (mode === 'all') {
    response.appendResponseLine(`**模式**: 全部扩展`);
  } else {
    response.appendResponseLine(`**模式**: 仅未激活的扩展`);
  }

  // 显示详细结果
  if (result.results && result.results.length > 0) {
    response.appendResponseLine('\n## 激活详情\n');
    
    for (const item of result.results) {
      const statusIcon = item.success ? '✅' : '❌';
      const stateLabel = item.wasActive ? '(已激活)' : '(未激活→激活)';
      
      response.appendResponseLine(`${statusIcon} **${item.name}**`);
      response.appendResponseLine(`   - ID: \`${item.id}\``);
      response.appendResponseLine(`   - 状态: ${stateLabel}`);
      
      if (!item.success && item.error) {
        response.appendResponseLine(`   - 错误: ${item.error}`);
      }
      
      if (item.buttonText) {
        response.appendResponseLine(`   - 按钮文本: "${item.buttonText}"`);
      }
      
      response.appendResponseLine('');
    }
  } else if (result.message) {
    response.appendResponseLine(`\n${result.message}`);
  }

  // 添加提示信息
  if (result.activated > 0) {
    response.appendResponseLine('\n**注意事项**:');
    response.appendResponseLine('- Service Worker激活后可能需要短暂延迟才能完全就绪');
    response.appendResponseLine('- 使用 `list_extension_contexts` 可查看当前扩展上下文状态');
    response.appendResponseLine('- 使用 `get_extension_logs` 可查看SW的启动日志');
  }
}
