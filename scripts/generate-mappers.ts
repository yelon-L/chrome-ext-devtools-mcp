#!/usr/bin/env node

/**
 * @license
 * Copyright 2025 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * 自动生成数据库行映射函数
 * 
 * 使用方式:
 *   npm run generate-mappers
 */

import fs from 'node:fs';
import path from 'node:path';
import {fileURLToPath} from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * 表映射配置
 */
interface TableMapping {
  tableName: string;           // 数据库表名
  typeName: string;            // TypeScript 类型名
  recordType: string;          // 业务对象类型
  columns: ColumnMapping[];
}

/**
 * 列映射配置
 */
interface ColumnMapping {
  dbName: string;              // 数据库列名
  tsName: string;              // TypeScript 属性名
  type: 'string' | 'number' | 'boolean' | 'json' | 'timestamp' | 'bigint';
  nullable: boolean;
  transform?: string;          // 自定义转换函数
}

/**
 * 表映射配置
 * 
 * 添加新表时，在这里配置映射规则
 */
const TABLE_MAPPINGS: TableMapping[] = [
  {
    tableName: 'mcp_users',
    typeName: 'UsersTable',
    recordType: 'UserRecordV2',
    columns: [
      {dbName: 'user_id', tsName: 'userId', type: 'string', nullable: false},
      {dbName: 'email', tsName: 'email', type: 'string', nullable: false},
      {dbName: 'username', tsName: 'username', type: 'string', nullable: false},
      {dbName: 'registered_at', tsName: 'registeredAt', type: 'bigint', nullable: false},
      {dbName: 'updated_at', tsName: 'updatedAt', type: 'bigint', nullable: true},
      {dbName: 'metadata', tsName: 'metadata', type: 'json', nullable: true},
    ],
  },
  {
    tableName: 'mcp_browsers',
    typeName: 'BrowsersTable',
    recordType: 'BrowserRecordV2',
    columns: [
      {dbName: 'browser_id', tsName: 'browserId', type: 'string', nullable: false},
      {dbName: 'user_id', tsName: 'userId', type: 'string', nullable: false},
      {dbName: 'browser_url', tsName: 'browserURL', type: 'string', nullable: false},
      {dbName: 'token_name', tsName: 'tokenName', type: 'string', nullable: false},
      {dbName: 'token', tsName: 'token', type: 'string', nullable: false},
      {dbName: 'created_at_ts', tsName: 'createdAt', type: 'bigint', nullable: false},
      {dbName: 'last_connected_at', tsName: 'lastConnectedAt', type: 'bigint', nullable: true},
      {dbName: 'tool_call_count', tsName: 'toolCallCount', type: 'number', nullable: false},
      {dbName: 'metadata', tsName: 'metadata', type: 'json', nullable: true},
    ],
  },
];

/**
 * 生成列转换代码
 */
function generateColumnTransform(col: ColumnMapping): string {
  const accessor = `row.${col.dbName}`;
  
  // 自定义转换
  if (col.transform) {
    return col.transform.replace('$value', accessor);
  }
  
  // 标准转换
  let transform = accessor;
  
  switch (col.type) {
    case 'number':
      transform = `Number(${accessor})`;
      break;
    case 'bigint':
      // BigInt 需转为 number
      transform = `Number(${accessor})`;
      break;
    case 'json':
      // JSONB 在 pg 驱动中已解析为对象，不需要 JSON.parse
      transform = accessor;
      break;
    case 'timestamp':
      transform = `new Date(${accessor})`;
      break;
  }
  
  // 处理可空字段
  if (col.nullable) {
    return `${accessor} ? ${transform} : undefined`;
  }
  
  return transform;
}

/**
 * 生成单个 mapper 函数（DB Row → 业务对象）
 */
function generateRowMapper(mapping: TableMapping): string {
  const functionName = `map${toPascalCase(mapping.tableName.replace('mcp_', ''))}Row`;
  
  return `
/**
 * 将数据库行映射为业务对象
 * @auto-generated - DO NOT EDIT MANUALLY
 */
export function ${functionName}(row: any): ${mapping.recordType} {
  return {
${mapping.columns.map(col => 
  `    ${col.tsName}: ${generateColumnTransform(col)},`
).join('\n')}
  };
}
`;
}

/**
 * 将 snake_case 转为 PascalCase
 */
function toPascalCase(str: string): string {
  return str
    .split('_')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join('');
}

/**
 * 生成完整文件内容
 */
function generateFile(): string {
  const header = `/**
 * @license
 * Copyright 2025 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * 数据库行映射函数
 * 
 * @auto-generated by scripts/generate-mappers.ts
 * DO NOT EDIT THIS FILE MANUALLY
 * 
 * 生成时间: ${new Date().toISOString()}
 */

import type {UserRecordV2, BrowserRecordV2} from './PersistentStoreV2.js';

`;

  const mappers = TABLE_MAPPINGS.map(mapping => generateRowMapper(mapping)).join('\n');
  
  return header + mappers;
}

/**
 * 主函数
 */
function main() {
  try {
    const outputPath = path.join(
      __dirname,
      '../src/multi-tenant/storage/mappers.generated.ts'
    );
    
    const code = generateFile();
    
    fs.writeFileSync(outputPath, code, 'utf-8');
    
    console.log('✅ 成功生成映射函数:', outputPath);
    console.log(`📊 生成了 ${TABLE_MAPPINGS.length} 个表的映射函数`);
  } catch (error) {
    console.error('❌ 生成失败:', error);
    process.exit(1);
  }
}

// 执行
main();
